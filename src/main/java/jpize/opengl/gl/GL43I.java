package jpize.opengl.gl;

import java.nio.*;

public interface GL43I extends GL42I {

    int GL_NUM_SHADING_LANGUAGE_VERSIONS = 33513;
    int GL_VERTEX_ATTRIB_ARRAY_LONG = 34638;
    int GL_COMPRESSED_RGB8_ETC2 = 37492;
    int GL_COMPRESSED_SRGB8_ETC2 = 37493;
    int GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37494;
    int GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37495;
    int GL_COMPRESSED_RGBA8_ETC2_EAC = 37496;
    int GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 37497;
    int GL_COMPRESSED_R11_EAC = 37488;
    int GL_COMPRESSED_SIGNED_R11_EAC = 37489;
    int GL_COMPRESSED_RG11_EAC = 37490;
    int GL_COMPRESSED_SIGNED_RG11_EAC = 37491;
    int GL_PRIMITIVE_RESTART_FIXED_INDEX = 36201;
    int GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 36202;
    int GL_MAX_ELEMENT_INDEX = 36203;
    int GL_TEXTURE_IMMUTABLE_LEVELS = 33503;
    int GL_COMPUTE_SHADER = 37305;
    int GL_MAX_COMPUTE_UNIFORM_BLOCKS = 37307;
    int GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 37308;
    int GL_MAX_COMPUTE_IMAGE_UNIFORMS = 37309;
    int GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 33378;
    int GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 33379;
    int GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 33380;
    int GL_MAX_COMPUTE_ATOMIC_COUNTERS = 33381;
    int GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 33382;
    int GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 37099;
    int GL_MAX_COMPUTE_WORK_GROUP_COUNT = 37310;
    int GL_MAX_COMPUTE_WORK_GROUP_SIZE = 37311;
    int GL_COMPUTE_WORK_GROUP_SIZE = 33383;
    int GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 37100;
    int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 37101;
    int GL_DISPATCH_INDIRECT_BUFFER = 37102;
    int GL_DISPATCH_INDIRECT_BUFFER_BINDING = 37103;
    int GL_COMPUTE_SHADER_BIT = 32;
    int GL_DEBUG_OUTPUT = 37600;
    int GL_DEBUG_OUTPUT_SYNCHRONOUS = 33346;
    int GL_CONTEXT_FLAG_DEBUG_BIT = 2;
    int GL_MAX_DEBUG_MESSAGE_LENGTH = 37187;
    int GL_MAX_DEBUG_LOGGED_MESSAGES = 37188;
    int GL_DEBUG_LOGGED_MESSAGES = 37189;
    int GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 33347;
    int GL_MAX_DEBUG_GROUP_STACK_DEPTH = 33388;
    int GL_DEBUG_GROUP_STACK_DEPTH = 33389;
    int GL_MAX_LABEL_LENGTH = 33512;
    int GL_DEBUG_CALLBACK_FUNCTION = 33348;
    int GL_DEBUG_CALLBACK_USER_PARAM = 33349;
    int GL_DEBUG_SOURCE_API = 33350;
    int GL_DEBUG_SOURCE_WINDOW_SYSTEM = 33351;
    int GL_DEBUG_SOURCE_SHADER_COMPILER = 33352;
    int GL_DEBUG_SOURCE_THIRD_PARTY = 33353;
    int GL_DEBUG_SOURCE_APPLICATION = 33354;
    int GL_DEBUG_SOURCE_OTHER = 33355;
    int GL_DEBUG_TYPE_ERROR = 33356;
    int GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 33357;
    int GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 33358;
    int GL_DEBUG_TYPE_PORTABILITY = 33359;
    int GL_DEBUG_TYPE_PERFORMANCE = 33360;
    int GL_DEBUG_TYPE_OTHER = 33361;
    int GL_DEBUG_TYPE_MARKER = 33384;
    int GL_DEBUG_TYPE_PUSH_GROUP = 33385;
    int GL_DEBUG_TYPE_POP_GROUP = 33386;
    int GL_DEBUG_SEVERITY_HIGH = 37190;
    int GL_DEBUG_SEVERITY_MEDIUM = 37191;
    int GL_DEBUG_SEVERITY_LOW = 37192;
    int GL_DEBUG_SEVERITY_NOTIFICATION = 33387;
    int GL_BUFFER = 33504;
    int GL_SHADER = 33505;
    int GL_PROGRAM = 33506;
    int GL_QUERY = 33507;
    int GL_PROGRAM_PIPELINE = 33508;
    int GL_SAMPLER = 33510;
    int GL_DISPLAY_LIST = 33511;
    int GL_MAX_UNIFORM_LOCATIONS = 33390;
    int GL_FRAMEBUFFER_DEFAULT_WIDTH = 37648;
    int GL_FRAMEBUFFER_DEFAULT_HEIGHT = 37649;
    int GL_FRAMEBUFFER_DEFAULT_LAYERS = 37650;
    int GL_FRAMEBUFFER_DEFAULT_SAMPLES = 37651;
    int GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 37652;
    int GL_MAX_FRAMEBUFFER_WIDTH = 37653;
    int GL_MAX_FRAMEBUFFER_HEIGHT = 37654;
    int GL_MAX_FRAMEBUFFER_LAYERS = 37655;
    int GL_MAX_FRAMEBUFFER_SAMPLES = 37656;
    int GL_INTERNALFORMAT_SUPPORTED = 33391;
    int GL_INTERNALFORMAT_PREFERRED = 33392;
    int GL_INTERNALFORMAT_RED_SIZE = 33393;
    int GL_INTERNALFORMAT_GREEN_SIZE = 33394;
    int GL_INTERNALFORMAT_BLUE_SIZE = 33395;
    int GL_INTERNALFORMAT_ALPHA_SIZE = 33396;
    int GL_INTERNALFORMAT_DEPTH_SIZE = 33397;
    int GL_INTERNALFORMAT_STENCIL_SIZE = 33398;
    int GL_INTERNALFORMAT_SHARED_SIZE = 33399;
    int GL_INTERNALFORMAT_RED_TYPE = 33400;
    int GL_INTERNALFORMAT_GREEN_TYPE = 33401;
    int GL_INTERNALFORMAT_BLUE_TYPE = 33402;
    int GL_INTERNALFORMAT_ALPHA_TYPE = 33403;
    int GL_INTERNALFORMAT_DEPTH_TYPE = 33404;
    int GL_INTERNALFORMAT_STENCIL_TYPE = 33405;
    int GL_MAX_WIDTH = 33406;
    int GL_MAX_HEIGHT = 33407;
    int GL_MAX_DEPTH = 33408;
    int GL_MAX_LAYERS = 33409;
    int GL_MAX_COMBINED_DIMENSIONS = 33410;
    int GL_COLOR_COMPONENTS = 33411;
    int GL_DEPTH_COMPONENTS = 33412;
    int GL_STENCIL_COMPONENTS = 33413;
    int GL_COLOR_RENDERABLE = 33414;
    int GL_DEPTH_RENDERABLE = 33415;
    int GL_STENCIL_RENDERABLE = 33416;
    int GL_FRAMEBUFFER_RENDERABLE = 33417;
    int GL_FRAMEBUFFER_RENDERABLE_LAYERED = 33418;
    int GL_FRAMEBUFFER_BLEND = 33419;
    int GL_READ_PIXELS = 33420;
    int GL_READ_PIXELS_FORMAT = 33421;
    int GL_READ_PIXELS_TYPE = 33422;
    int GL_TEXTURE_IMAGE_FORMAT = 33423;
    int GL_TEXTURE_IMAGE_TYPE = 33424;
    int GL_GET_TEXTURE_IMAGE_FORMAT = 33425;
    int GL_GET_TEXTURE_IMAGE_TYPE = 33426;
    int GL_MIPMAP = 33427;
    int GL_MANUAL_GENERATE_MIPMAP = 33428;
    int GL_AUTO_GENERATE_MIPMAP = 33429;
    int GL_COLOR_ENCODING = 33430;
    int GL_SRGB_READ = 33431;
    int GL_SRGB_WRITE = 33432;
    int GL_FILTER = 33434;
    int GL_VERTEX_TEXTURE = 33435;
    int GL_TESS_CONTROL_TEXTURE = 33436;
    int GL_TESS_EVALUATION_TEXTURE = 33437;
    int GL_GEOMETRY_TEXTURE = 33438;
    int GL_FRAGMENT_TEXTURE = 33439;
    int GL_COMPUTE_TEXTURE = 33440;
    int GL_TEXTURE_SHADOW = 33441;
    int GL_TEXTURE_GATHER = 33442;
    int GL_TEXTURE_GATHER_SHADOW = 33443;
    int GL_SHADER_IMAGE_LOAD = 33444;
    int GL_SHADER_IMAGE_STORE = 33445;
    int GL_SHADER_IMAGE_ATOMIC = 33446;
    int GL_IMAGE_TEXEL_SIZE = 33447;
    int GL_IMAGE_COMPATIBILITY_CLASS = 33448;
    int GL_IMAGE_PIXEL_FORMAT = 33449;
    int GL_IMAGE_PIXEL_TYPE = 33450;
    int GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 33452;
    int GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 33453;
    int GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 33454;
    int GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 33455;
    int GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 33457;
    int GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 33458;
    int GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 33459;
    int GL_CLEAR_BUFFER = 33460;
    int GL_TEXTURE_VIEW = 33461;
    int GL_VIEW_COMPATIBILITY_CLASS = 33462;
    int GL_FULL_SUPPORT = 33463;
    int GL_CAVEAT_SUPPORT = 33464;
    int GL_IMAGE_CLASS_4_X_32 = 33465;
    int GL_IMAGE_CLASS_2_X_32 = 33466;
    int GL_IMAGE_CLASS_1_X_32 = 33467;
    int GL_IMAGE_CLASS_4_X_16 = 33468;
    int GL_IMAGE_CLASS_2_X_16 = 33469;
    int GL_IMAGE_CLASS_1_X_16 = 33470;
    int GL_IMAGE_CLASS_4_X_8 = 33471;
    int GL_IMAGE_CLASS_2_X_8 = 33472;
    int GL_IMAGE_CLASS_1_X_8 = 33473;
    int GL_IMAGE_CLASS_11_11_10 = 33474;
    int GL_IMAGE_CLASS_10_10_10_2 = 33475;
    int GL_VIEW_CLASS_128_BITS = 33476;
    int GL_VIEW_CLASS_96_BITS = 33477;
    int GL_VIEW_CLASS_64_BITS = 33478;
    int GL_VIEW_CLASS_48_BITS = 33479;
    int GL_VIEW_CLASS_32_BITS = 33480;
    int GL_VIEW_CLASS_24_BITS = 33481;
    int GL_VIEW_CLASS_16_BITS = 33482;
    int GL_VIEW_CLASS_8_BITS = 33483;
    int GL_VIEW_CLASS_S3TC_DXT1_RGB = 33484;
    int GL_VIEW_CLASS_S3TC_DXT1_RGBA = 33485;
    int GL_VIEW_CLASS_S3TC_DXT3_RGBA = 33486;
    int GL_VIEW_CLASS_S3TC_DXT5_RGBA = 33487;
    int GL_VIEW_CLASS_RGTC1_RED = 33488;
    int GL_VIEW_CLASS_RGTC2_RG = 33489;
    int GL_VIEW_CLASS_BPTC_UNORM = 33490;
    int GL_VIEW_CLASS_BPTC_FLOAT = 33491;
    int GL_UNIFORM = 37601;
    int GL_UNIFORM_BLOCK = 37602;
    int GL_PROGRAM_INPUT = 37603;
    int GL_PROGRAM_OUTPUT = 37604;
    int GL_BUFFER_VARIABLE = 37605;
    int GL_SHADER_STORAGE_BLOCK = 37606;
    int GL_VERTEX_SUBROUTINE = 37608;
    int GL_TESS_CONTROL_SUBROUTINE = 37609;
    int GL_TESS_EVALUATION_SUBROUTINE = 37610;
    int GL_GEOMETRY_SUBROUTINE = 37611;
    int GL_FRAGMENT_SUBROUTINE = 37612;
    int GL_COMPUTE_SUBROUTINE = 37613;
    int GL_VERTEX_SUBROUTINE_UNIFORM = 37614;
    int GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 37615;
    int GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 37616;
    int GL_GEOMETRY_SUBROUTINE_UNIFORM = 37617;
    int GL_FRAGMENT_SUBROUTINE_UNIFORM = 37618;
    int GL_COMPUTE_SUBROUTINE_UNIFORM = 37619;
    int GL_TRANSFORM_FEEDBACK_VARYING = 37620;
    int GL_ACTIVE_RESOURCES = 37621;
    int GL_MAX_NAME_LENGTH = 37622;
    int GL_MAX_NUM_ACTIVE_VARIABLES = 37623;
    int GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 37624;
    int GL_NAME_LENGTH = 37625;
    int GL_TYPE = 37626;
    int GL_ARRAY_SIZE = 37627;
    int GL_OFFSET = 37628;
    int GL_BLOCK_INDEX = 37629;
    int GL_ARRAY_STRIDE = 37630;
    int GL_MATRIX_STRIDE = 37631;
    int GL_IS_ROW_MAJOR = 37632;
    int GL_ATOMIC_COUNTER_BUFFER_INDEX = 37633;
    int GL_BUFFER_BINDING = 37634;
    int GL_BUFFER_DATA_SIZE = 37635;
    int GL_NUM_ACTIVE_VARIABLES = 37636;
    int GL_ACTIVE_VARIABLES = 37637;
    int GL_REFERENCED_BY_VERTEX_SHADER = 37638;
    int GL_REFERENCED_BY_TESS_CONTROL_SHADER = 37639;
    int GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 37640;
    int GL_REFERENCED_BY_GEOMETRY_SHADER = 37641;
    int GL_REFERENCED_BY_FRAGMENT_SHADER = 37642;
    int GL_REFERENCED_BY_COMPUTE_SHADER = 37643;
    int GL_TOP_LEVEL_ARRAY_SIZE = 37644;
    int GL_TOP_LEVEL_ARRAY_STRIDE = 37645;
    int GL_LOCATION = 37646;
    int GL_LOCATION_INDEX = 37647;
    int GL_IS_PER_PATCH = 37607;
    int GL_SHADER_STORAGE_BUFFER = 37074;
    int GL_SHADER_STORAGE_BUFFER_BINDING = 37075;
    int GL_SHADER_STORAGE_BUFFER_START = 37076;
    int GL_SHADER_STORAGE_BUFFER_SIZE = 37077;
    int GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 37078;
    int GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 37079;
    int GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 37080;
    int GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 37081;
    int GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 37082;
    int GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 37083;
    int GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 37084;
    int GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 37085;
    int GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 37086;
    int GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 37087;
    int GL_SHADER_STORAGE_BARRIER_BIT = 8192;
    int GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 36665;
    int GL_DEPTH_STENCIL_TEXTURE_MODE = 37098;
    int GL_TEXTURE_BUFFER_OFFSET = 37277;
    int GL_TEXTURE_BUFFER_SIZE = 37278;
    int GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 37279;
    int GL_TEXTURE_VIEW_MIN_LEVEL = 33499;
    int GL_TEXTURE_VIEW_NUM_LEVELS = 33500;
    int GL_TEXTURE_VIEW_MIN_LAYER = 33501;
    int GL_TEXTURE_VIEW_NUM_LAYERS = 33502;
    int GL_VERTEX_ATTRIB_BINDING = 33492;
    int GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 33493;
    int GL_VERTEX_BINDING_DIVISOR = 33494;
    int GL_VERTEX_BINDING_OFFSET = 33495;
    int GL_VERTEX_BINDING_STRIDE = 33496;
    int GL_VERTEX_BINDING_BUFFER = 36687;
    int GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 33497;
    int GL_MAX_VERTEX_ATTRIB_BINDINGS = 33498;

    void glClearBufferData(int target, int internalformat, int format, int type, ByteBuffer data);
    void glClearBufferData(int target, int internalformat, int format, int type, ShortBuffer data);
    void glClearBufferData(int target, int internalformat, int format, int type, IntBuffer data);
    void glClearBufferData(int target, int internalformat, int format, int type, FloatBuffer data);
    void glClearBufferSubData(int target, int internalformat, long offset, long size, int format, int type, ByteBuffer data);
    void glClearBufferSubData(int target, int internalformat, long offset, long size, int format, int type, ShortBuffer data);
    void glClearBufferSubData(int target, int internalformat, long offset, long size, int format, int type, IntBuffer data);
    void glClearBufferSubData(int target, int internalformat, long offset, long size, int format, int type, FloatBuffer data);
    void glDispatchCompute(int num_groups_x, int num_groups_y, int num_groups_z);
    void glDispatchComputeIndirect(long indirect);
    void glCopyImageSubData(int srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, int dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth);
    void glDebugMessageControl(int source, int type, int severity, IntBuffer ids, boolean enabled);
    void glDebugMessageControl(int source, int type, int severity, int id, boolean enabled);
    void glDebugMessageInsert(int source, int type, int id, int severity, ByteBuffer message);
    void glDebugMessageInsert(int source, int type, int id, int severity, CharSequence message);
    interface GLDebugMessageCallback {
        void invoke(int source, int type, int id, int severity, int length, String message, long userParam);
    }
    void glDebugMessageCallback(GLDebugMessageCallback callback, long userParam);
    int glGetDebugMessageLog(int count, IntBuffer sources, IntBuffer types, IntBuffer ids, IntBuffer severities, IntBuffer lengths, ByteBuffer messageLog);
    void glPushDebugGroup(int source, int id, ByteBuffer message);
    void glPushDebugGroup(int source, int id, CharSequence message);
    void glPopDebugGroup();
    void glObjectLabel(int identifier, int name, ByteBuffer label);
    void glObjectLabel(int identifier, int name, CharSequence label);
    void glGetObjectLabel(int identifier, int name, IntBuffer length, ByteBuffer label);
    String glGetObjectLabel(int identifier, int name, int bufSize);
    String glGetObjectLabel(int identifier, int name);
    void glObjectPtrLabel(long ptr, ByteBuffer label);
    void glObjectPtrLabel(long ptr, CharSequence label);
    void glGetObjectPtrLabel(long ptr, IntBuffer length, ByteBuffer label);
    String glGetObjectPtrLabel(long ptr, int bufSize);
    String glGetObjectPtrLabel(long ptr);
    void glFramebufferParameteri(int target, int pname, int param);
    void glGetFramebufferParameteriv(int target, int pname, IntBuffer params);
    int glGetFramebufferParameteri(int target, int pname);
    void glGetInternalformati64v(int target, int internalformat, int pname, LongBuffer params);
    long glGetInternalformati64(int target, int internalformat, int pname);
    void glInvalidateTexSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth);
    void glInvalidateTexImage(int texture, int level);
    void glInvalidateBufferSubData(int buffer, long offset, long length);
    void glInvalidateBufferData(int buffer);
    void glInvalidateFramebuffer(int target, IntBuffer attachments);
    void glInvalidateFramebuffer(int target, int attachment);
    void glInvalidateSubFramebuffer(int target, IntBuffer attachments, int x, int y, int width, int height);
    void glInvalidateSubFramebuffer(int target, int attachment, int x, int y, int width, int height);
    void glMultiDrawArraysIndirect(int mode, ByteBuffer indirect, int drawcount, int stride);
    void glMultiDrawArraysIndirect(int mode, long indirect, int drawcount, int stride);
    void glMultiDrawArraysIndirect(int mode, IntBuffer indirect, int drawcount, int stride);
    void glMultiDrawElementsIndirect(int mode, int type, ByteBuffer indirect, int drawcount, int stride);
    void glMultiDrawElementsIndirect(int mode, int type, long indirect, int drawcount, int stride);
    void glMultiDrawElementsIndirect(int mode, int type, IntBuffer indirect, int drawcount, int stride);
    void glGetProgramInterfaceiv(int program, int programInterface, int pname, IntBuffer params);
    int glGetProgramInterfacei(int program, int programInterface, int pname);
    int glGetProgramResourceIndex(int program, int programInterface, ByteBuffer name);
    int glGetProgramResourceIndex(int program, int programInterface, CharSequence name);
    void glGetProgramResourceName(int program, int programInterface, int index, IntBuffer length, ByteBuffer name);
    String glGetProgramResourceName(int program, int programInterface, int index, int bufSize);
    String glGetProgramResourceName(int program, int programInterface, int index);
    void glGetProgramResourceiv(int program, int programInterface, int index, IntBuffer props, IntBuffer length, IntBuffer params);
    int glGetProgramResourceLocation(int program, int programInterface, ByteBuffer name);
    int glGetProgramResourceLocation(int program, int programInterface, CharSequence name);
    int glGetProgramResourceLocationIndex(int program, int programInterface, ByteBuffer name);
    int glGetProgramResourceLocationIndex(int program, int programInterface, CharSequence name);
    void glShaderStorageBlockBinding(int program, int storageBlockIndex, int storageBlockBinding);
    void glTexBufferRange(int target, int internalformat, int buffer, long offset, long size);
    void glTexStorage2DMultisample(int target, int samples, int internalformat, int width, int height, boolean fixedsamplelocations);
    void glTexStorage3DMultisample(int target, int samples, int internalformat, int width, int height, int depth, boolean fixedsamplelocations);
    void glTextureView(int texture, int target, int origtexture, int internalformat, int minlevel, int numlevels, int minlayer, int numlayers);
    void glBindVertexBuffer(int bindingindex, int buffer, long offset, int stride);
    void glVertexAttribFormat(int attribindex, int size, int type, boolean normalized, int relativeoffset);
    void glVertexAttribIFormat(int attribindex, int size, int type, int relativeoffset);
    void glVertexAttribLFormat(int attribindex, int size, int type, int relativeoffset);
    void glVertexAttribBinding(int attribindex, int bindingindex);
    void glVertexBindingDivisor(int bindingindex, int divisor);
    void glClearBufferData(int target, int internalformat, int format, int type, short[] data);
    void glClearBufferData(int target, int internalformat, int format, int type, int[] data);
    void glClearBufferData(int target, int internalformat, int format, int type, float[] data);
    void glClearBufferSubData(int target, int internalformat, long offset, long size, int format, int type, short[] data);
    void glClearBufferSubData(int target, int internalformat, long offset, long size, int format, int type, int[] data);
    void glClearBufferSubData(int target, int internalformat, long offset, long size, int format, int type, float[] data);
    void glDebugMessageControl(int source, int type, int severity, int[] ids, boolean enabled);
    int glGetDebugMessageLog(int count, int[] sources, int[] types, int[] ids, int[] severities, int[] lengths, ByteBuffer messageLog);
    void glGetObjectLabel(int identifier, int name, int[] length, ByteBuffer label);
    void glGetObjectPtrLabel(long ptr, int[] length, ByteBuffer label);
    void glGetFramebufferParameteriv(int target, int pname, int[] params);
    void glGetInternalformati64v(int target, int internalformat, int pname, long[] params);
    void glInvalidateFramebuffer(int target, int[] attachments);
    void glInvalidateSubFramebuffer(int target, int[] attachments, int x, int y, int width, int height);
    void glMultiDrawArraysIndirect(int mode, int[] indirect, int drawcount, int stride);
    void glMultiDrawElementsIndirect(int mode, int type, int[] indirect, int drawcount, int stride);
    void glGetProgramInterfaceiv(int program, int programInterface, int pname, int[] params);
    void glGetProgramResourceName(int program, int programInterface, int index, int[] length, ByteBuffer name);
    void glGetProgramResourceiv(int program, int programInterface, int index, int[] props, int[] length, int[] params);

}
